// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/resources/vector_tile.proto

package mapnik.vector;

public final class VectorTile {
  private VectorTile() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface tileOrBuilder extends 
       com.google.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<tile> {

    // repeated .mapnik.vector.tile.layer layers = 3;
    /**
     * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
     */
    java.util.List<mapnik.vector.VectorTile.tile.layer> 
        getLayersList();
    /**
     * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
     */
    mapnik.vector.VectorTile.tile.layer getLayers(int index);
    /**
     * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
     */
    int getLayersCount();
  }
  /**
   * Protobuf type {@code mapnik.vector.tile}
   */
  public static final class tile extends
      com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
        tile> implements tileOrBuilder {
    // Use tile.newBuilder() to construct.
    private tile(com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<mapnik.vector.VectorTile.tile, ?> builder) {
      super(builder);

    }
    private tile(boolean noInit) {}

    private static final tile defaultInstance;
    public static tile getDefaultInstance() {
      return defaultInstance;
    }

    public tile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private tile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                layers_ = new java.util.ArrayList<mapnik.vector.VectorTile.tile.layer>();
                mutable_bitField0_ |= 0x00000001;
              }
              layers_.add(input.readMessage(mapnik.vector.VectorTile.tile.layer.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          layers_ = java.util.Collections.unmodifiableList(layers_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<tile> PARSER =
        new com.google.protobuf.AbstractParser<tile>() {
      public tile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new tile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<tile> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code mapnik.vector.tile.GeomType}
     */
    public enum GeomType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>Unknown = 0;</code>
       */
      Unknown(0, 0),
      /**
       * <code>Point = 1;</code>
       */
      Point(1, 1),
      /**
       * <code>LineString = 2;</code>
       */
      LineString(2, 2),
      /**
       * <code>Polygon = 3;</code>
       */
      Polygon(3, 3),
      ;

      /**
       * <code>Unknown = 0;</code>
       */
      public static final int Unknown_VALUE = 0;
      /**
       * <code>Point = 1;</code>
       */
      public static final int Point_VALUE = 1;
      /**
       * <code>LineString = 2;</code>
       */
      public static final int LineString_VALUE = 2;
      /**
       * <code>Polygon = 3;</code>
       */
      public static final int Polygon_VALUE = 3;


      public final int getNumber() { return value; }

      public static GeomType valueOf(int value) {
        switch (value) {
          case 0: return Unknown;
          case 1: return Point;
          case 2: return LineString;
          case 3: return Polygon;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<GeomType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<GeomType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<GeomType>() {
              public GeomType findValueByNumber(int number) {
                return GeomType.valueOf(number);
              }
            };

      private final int value;

      private GeomType(int index, int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:mapnik.vector.tile.GeomType)
    }

    public interface valueOrBuilder extends 
         com.google.protobuf.GeneratedMessageLite.
              ExtendableMessageOrBuilder<value> {

      // optional string string_value = 1;
      /**
       * <code>optional string string_value = 1;</code>
       *
       * <pre>
       * Exactly one of these values may be present in a valid message
       * </pre>
       */
      boolean hasStringValue();
      /**
       * <code>optional string string_value = 1;</code>
       *
       * <pre>
       * Exactly one of these values may be present in a valid message
       * </pre>
       */
      java.lang.String getStringValue();
      /**
       * <code>optional string string_value = 1;</code>
       *
       * <pre>
       * Exactly one of these values may be present in a valid message
       * </pre>
       */
      com.google.protobuf.ByteString
          getStringValueBytes();

      // optional float float_value = 2;
      /**
       * <code>optional float float_value = 2;</code>
       */
      boolean hasFloatValue();
      /**
       * <code>optional float float_value = 2;</code>
       */
      float getFloatValue();

      // optional double double_value = 3;
      /**
       * <code>optional double double_value = 3;</code>
       */
      boolean hasDoubleValue();
      /**
       * <code>optional double double_value = 3;</code>
       */
      double getDoubleValue();

      // optional int64 int_value = 4;
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      boolean hasIntValue();
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      long getIntValue();

      // optional uint64 uint_value = 5;
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      boolean hasUintValue();
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      long getUintValue();

      // optional sint64 sint_value = 6;
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      boolean hasSintValue();
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      long getSintValue();

      // optional bool bool_value = 7;
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      boolean hasBoolValue();
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      boolean getBoolValue();
    }
    /**
     * Protobuf type {@code mapnik.vector.tile.value}
     *
     * <pre>
     * Variant type encoding
     * </pre>
     */
    public static final class value extends
        com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
          value> implements valueOrBuilder {
      // Use value.newBuilder() to construct.
      private value(com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<mapnik.vector.VectorTile.tile.value, ?> builder) {
        super(builder);

      }
      private value(boolean noInit) {}

      private static final value defaultInstance;
      public static value getDefaultInstance() {
        return defaultInstance;
      }

      public value getDefaultInstanceForType() {
        return defaultInstance;
      }

      private value(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                stringValue_ = input.readBytes();
                break;
              }
              case 21: {
                bitField0_ |= 0x00000002;
                floatValue_ = input.readFloat();
                break;
              }
              case 25: {
                bitField0_ |= 0x00000004;
                doubleValue_ = input.readDouble();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                intValue_ = input.readInt64();
                break;
              }
              case 40: {
                bitField0_ |= 0x00000010;
                uintValue_ = input.readUInt64();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000020;
                sintValue_ = input.readSInt64();
                break;
              }
              case 56: {
                bitField0_ |= 0x00000040;
                boolValue_ = input.readBool();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static com.google.protobuf.Parser<value> PARSER =
          new com.google.protobuf.AbstractParser<value>() {
        public value parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new value(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<value> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string string_value = 1;
      public static final int STRING_VALUE_FIELD_NUMBER = 1;
      private java.lang.Object stringValue_;
      /**
       * <code>optional string string_value = 1;</code>
       *
       * <pre>
       * Exactly one of these values may be present in a valid message
       * </pre>
       */
      public boolean hasStringValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string string_value = 1;</code>
       *
       * <pre>
       * Exactly one of these values may be present in a valid message
       * </pre>
       */
      public java.lang.String getStringValue() {
        java.lang.Object ref = stringValue_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stringValue_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string string_value = 1;</code>
       *
       * <pre>
       * Exactly one of these values may be present in a valid message
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStringValueBytes() {
        java.lang.Object ref = stringValue_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stringValue_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional float float_value = 2;
      public static final int FLOAT_VALUE_FIELD_NUMBER = 2;
      private float floatValue_;
      /**
       * <code>optional float float_value = 2;</code>
       */
      public boolean hasFloatValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float float_value = 2;</code>
       */
      public float getFloatValue() {
        return floatValue_;
      }

      // optional double double_value = 3;
      public static final int DOUBLE_VALUE_FIELD_NUMBER = 3;
      private double doubleValue_;
      /**
       * <code>optional double double_value = 3;</code>
       */
      public boolean hasDoubleValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double double_value = 3;</code>
       */
      public double getDoubleValue() {
        return doubleValue_;
      }

      // optional int64 int_value = 4;
      public static final int INT_VALUE_FIELD_NUMBER = 4;
      private long intValue_;
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      public boolean hasIntValue() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 int_value = 4;</code>
       */
      public long getIntValue() {
        return intValue_;
      }

      // optional uint64 uint_value = 5;
      public static final int UINT_VALUE_FIELD_NUMBER = 5;
      private long uintValue_;
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      public boolean hasUintValue() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint64 uint_value = 5;</code>
       */
      public long getUintValue() {
        return uintValue_;
      }

      // optional sint64 sint_value = 6;
      public static final int SINT_VALUE_FIELD_NUMBER = 6;
      private long sintValue_;
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      public boolean hasSintValue() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint64 sint_value = 6;</code>
       */
      public long getSintValue() {
        return sintValue_;
      }

      // optional bool bool_value = 7;
      public static final int BOOL_VALUE_FIELD_NUMBER = 7;
      private boolean boolValue_;
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      public boolean hasBoolValue() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool bool_value = 7;</code>
       */
      public boolean getBoolValue() {
        return boolValue_;
      }

      private void initFields() {
        stringValue_ = "";
        floatValue_ = 0F;
        doubleValue_ = 0D;
        intValue_ = 0L;
        uintValue_ = 0L;
        sintValue_ = 0L;
        boolValue_ = false;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!extensionsAreInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        com.google.protobuf.GeneratedMessageLite
          .ExtendableMessage<mapnik.vector.VectorTile.tile.value>.ExtensionWriter extensionWriter =
            newExtensionWriter();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getStringValueBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeFloat(2, floatValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, doubleValue_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeInt64(4, intValue_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeUInt64(5, uintValue_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeSInt64(6, sintValue_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeBool(7, boolValue_);
        }
        extensionWriter.writeUntil(536870912, output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getStringValueBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, floatValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, doubleValue_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, intValue_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(5, uintValue_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeSInt64Size(6, sintValue_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(7, boolValue_);
        }
        size += extensionsSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static mapnik.vector.VectorTile.tile.value parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static mapnik.vector.VectorTile.tile.value parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.value parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static mapnik.vector.VectorTile.tile.value parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.value parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static mapnik.vector.VectorTile.tile.value parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.value parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static mapnik.vector.VectorTile.tile.value parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.value parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static mapnik.vector.VectorTile.tile.value parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(mapnik.vector.VectorTile.tile.value prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code mapnik.vector.tile.value}
       *
       * <pre>
       * Variant type encoding
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
            mapnik.vector.VectorTile.tile.value, Builder> implements mapnik.vector.VectorTile.tile.valueOrBuilder {
        // Construct using mapnik.vector.VectorTile.tile.value.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          stringValue_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          floatValue_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000002);
          doubleValue_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000004);
          intValue_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000008);
          uintValue_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000010);
          sintValue_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000020);
          boolValue_ = false;
          bitField0_ = (bitField0_ & ~0x00000040);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public mapnik.vector.VectorTile.tile.value getDefaultInstanceForType() {
          return mapnik.vector.VectorTile.tile.value.getDefaultInstance();
        }

        public mapnik.vector.VectorTile.tile.value build() {
          mapnik.vector.VectorTile.tile.value result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public mapnik.vector.VectorTile.tile.value buildPartial() {
          mapnik.vector.VectorTile.tile.value result = new mapnik.vector.VectorTile.tile.value(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.stringValue_ = stringValue_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.floatValue_ = floatValue_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.doubleValue_ = doubleValue_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.intValue_ = intValue_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.uintValue_ = uintValue_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.sintValue_ = sintValue_;
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000040;
          }
          result.boolValue_ = boolValue_;
          result.bitField0_ = to_bitField0_;
          return result;
        }

        public Builder mergeFrom(mapnik.vector.VectorTile.tile.value other) {
          if (other == mapnik.vector.VectorTile.tile.value.getDefaultInstance()) return this;
          if (other.hasStringValue()) {
            bitField0_ |= 0x00000001;
            stringValue_ = other.stringValue_;
            
          }
          if (other.hasFloatValue()) {
            setFloatValue(other.getFloatValue());
          }
          if (other.hasDoubleValue()) {
            setDoubleValue(other.getDoubleValue());
          }
          if (other.hasIntValue()) {
            setIntValue(other.getIntValue());
          }
          if (other.hasUintValue()) {
            setUintValue(other.getUintValue());
          }
          if (other.hasSintValue()) {
            setSintValue(other.getSintValue());
          }
          if (other.hasBoolValue()) {
            setBoolValue(other.getBoolValue());
          }
          this.mergeExtensionFields(other);
          return this;
        }

        public final boolean isInitialized() {
          if (!extensionsAreInitialized()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          mapnik.vector.VectorTile.tile.value parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (mapnik.vector.VectorTile.tile.value) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string string_value = 1;
        private java.lang.Object stringValue_ = "";
        /**
         * <code>optional string string_value = 1;</code>
         *
         * <pre>
         * Exactly one of these values may be present in a valid message
         * </pre>
         */
        public boolean hasStringValue() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string string_value = 1;</code>
         *
         * <pre>
         * Exactly one of these values may be present in a valid message
         * </pre>
         */
        public java.lang.String getStringValue() {
          java.lang.Object ref = stringValue_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            stringValue_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string string_value = 1;</code>
         *
         * <pre>
         * Exactly one of these values may be present in a valid message
         * </pre>
         */
        public com.google.protobuf.ByteString
            getStringValueBytes() {
          java.lang.Object ref = stringValue_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            stringValue_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string string_value = 1;</code>
         *
         * <pre>
         * Exactly one of these values may be present in a valid message
         * </pre>
         */
        public Builder setStringValue(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          stringValue_ = value;
          
          return this;
        }
        /**
         * <code>optional string string_value = 1;</code>
         *
         * <pre>
         * Exactly one of these values may be present in a valid message
         * </pre>
         */
        public Builder clearStringValue() {
          bitField0_ = (bitField0_ & ~0x00000001);
          stringValue_ = getDefaultInstance().getStringValue();
          
          return this;
        }
        /**
         * <code>optional string string_value = 1;</code>
         *
         * <pre>
         * Exactly one of these values may be present in a valid message
         * </pre>
         */
        public Builder setStringValueBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          stringValue_ = value;
          
          return this;
        }

        // optional float float_value = 2;
        private float floatValue_ ;
        /**
         * <code>optional float float_value = 2;</code>
         */
        public boolean hasFloatValue() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional float float_value = 2;</code>
         */
        public float getFloatValue() {
          return floatValue_;
        }
        /**
         * <code>optional float float_value = 2;</code>
         */
        public Builder setFloatValue(float value) {
          bitField0_ |= 0x00000002;
          floatValue_ = value;
          
          return this;
        }
        /**
         * <code>optional float float_value = 2;</code>
         */
        public Builder clearFloatValue() {
          bitField0_ = (bitField0_ & ~0x00000002);
          floatValue_ = 0F;
          
          return this;
        }

        // optional double double_value = 3;
        private double doubleValue_ ;
        /**
         * <code>optional double double_value = 3;</code>
         */
        public boolean hasDoubleValue() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double double_value = 3;</code>
         */
        public double getDoubleValue() {
          return doubleValue_;
        }
        /**
         * <code>optional double double_value = 3;</code>
         */
        public Builder setDoubleValue(double value) {
          bitField0_ |= 0x00000004;
          doubleValue_ = value;
          
          return this;
        }
        /**
         * <code>optional double double_value = 3;</code>
         */
        public Builder clearDoubleValue() {
          bitField0_ = (bitField0_ & ~0x00000004);
          doubleValue_ = 0D;
          
          return this;
        }

        // optional int64 int_value = 4;
        private long intValue_ ;
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public boolean hasIntValue() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public long getIntValue() {
          return intValue_;
        }
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public Builder setIntValue(long value) {
          bitField0_ |= 0x00000008;
          intValue_ = value;
          
          return this;
        }
        /**
         * <code>optional int64 int_value = 4;</code>
         */
        public Builder clearIntValue() {
          bitField0_ = (bitField0_ & ~0x00000008);
          intValue_ = 0L;
          
          return this;
        }

        // optional uint64 uint_value = 5;
        private long uintValue_ ;
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public boolean hasUintValue() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public long getUintValue() {
          return uintValue_;
        }
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public Builder setUintValue(long value) {
          bitField0_ |= 0x00000010;
          uintValue_ = value;
          
          return this;
        }
        /**
         * <code>optional uint64 uint_value = 5;</code>
         */
        public Builder clearUintValue() {
          bitField0_ = (bitField0_ & ~0x00000010);
          uintValue_ = 0L;
          
          return this;
        }

        // optional sint64 sint_value = 6;
        private long sintValue_ ;
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public boolean hasSintValue() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public long getSintValue() {
          return sintValue_;
        }
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public Builder setSintValue(long value) {
          bitField0_ |= 0x00000020;
          sintValue_ = value;
          
          return this;
        }
        /**
         * <code>optional sint64 sint_value = 6;</code>
         */
        public Builder clearSintValue() {
          bitField0_ = (bitField0_ & ~0x00000020);
          sintValue_ = 0L;
          
          return this;
        }

        // optional bool bool_value = 7;
        private boolean boolValue_ ;
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public boolean hasBoolValue() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public boolean getBoolValue() {
          return boolValue_;
        }
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public Builder setBoolValue(boolean value) {
          bitField0_ |= 0x00000040;
          boolValue_ = value;
          
          return this;
        }
        /**
         * <code>optional bool bool_value = 7;</code>
         */
        public Builder clearBoolValue() {
          bitField0_ = (bitField0_ & ~0x00000040);
          boolValue_ = false;
          
          return this;
        }

        // @@protoc_insertion_point(builder_scope:mapnik.vector.tile.value)
      }

      static {
        defaultInstance = new value(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mapnik.vector.tile.value)
    }

    public interface featureOrBuilder
        extends com.google.protobuf.MessageLiteOrBuilder {

      // optional uint64 id = 1;
      /**
       * <code>optional uint64 id = 1;</code>
       */
      boolean hasId();
      /**
       * <code>optional uint64 id = 1;</code>
       */
      long getId();

      // repeated uint32 tags = 2 [packed = true];
      /**
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       *
       * <pre>
       * Tags of this feature. Even numbered values refer to the nth
       * value in the keys list on the tile message, odd numbered
       * values refer to the nth value in the values list on the tile
       * message.
       * </pre>
       */
      java.util.List<java.lang.Integer> getTagsList();
      /**
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       *
       * <pre>
       * Tags of this feature. Even numbered values refer to the nth
       * value in the keys list on the tile message, odd numbered
       * values refer to the nth value in the values list on the tile
       * message.
       * </pre>
       */
      int getTagsCount();
      /**
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       *
       * <pre>
       * Tags of this feature. Even numbered values refer to the nth
       * value in the keys list on the tile message, odd numbered
       * values refer to the nth value in the values list on the tile
       * message.
       * </pre>
       */
      int getTags(int index);

      // optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
      /**
       * <code>optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];</code>
       *
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       */
      boolean hasType();
      /**
       * <code>optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];</code>
       *
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       */
      mapnik.vector.VectorTile.tile.GeomType getType();

      // repeated uint32 geometry = 4 [packed = true];
      /**
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       *
       * <pre>
       * Contains a stream of commands and parameters (vertices). The
       * repeat count is shifted to the left by 3 bits. This means
       * that the command has 3 bits (0-7). The repeat count
       * indicates how often this command is to be repeated. Defined
       * commands are:
       * - MoveTo:    1   (2 parameters follow)
       * - LineTo:    2   (2 parameters follow)
       * - ClosePath: 7   (no parameters follow)
       *
       * Commands are encoded as uint32 varints. Vertex parameters
       * are encoded as deltas to the previous position and, as they
       * may be negative, are further "zigzag" encoded as unsigned
       * 32-bit ints:
       *
       *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
       *
       * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
       * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
       *                                  == command type 7 (ClosePath), length 1
       *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
       *                         === relative LineTo(+5, +6) == LineTo(8, 12)
       *                      == [00010 010] = command type 2 (LineTo), length 2
       *                  === relative MoveTo(+3, +6)
       *              == [00001 001] = command type 1 (MoveTo), length 1
       *
       * The original position is (0,0).
       * </pre>
       */
      java.util.List<java.lang.Integer> getGeometryList();
      /**
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       *
       * <pre>
       * Contains a stream of commands and parameters (vertices). The
       * repeat count is shifted to the left by 3 bits. This means
       * that the command has 3 bits (0-7). The repeat count
       * indicates how often this command is to be repeated. Defined
       * commands are:
       * - MoveTo:    1   (2 parameters follow)
       * - LineTo:    2   (2 parameters follow)
       * - ClosePath: 7   (no parameters follow)
       *
       * Commands are encoded as uint32 varints. Vertex parameters
       * are encoded as deltas to the previous position and, as they
       * may be negative, are further "zigzag" encoded as unsigned
       * 32-bit ints:
       *
       *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
       *
       * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
       * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
       *                                  == command type 7 (ClosePath), length 1
       *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
       *                         === relative LineTo(+5, +6) == LineTo(8, 12)
       *                      == [00010 010] = command type 2 (LineTo), length 2
       *                  === relative MoveTo(+3, +6)
       *              == [00001 001] = command type 1 (MoveTo), length 1
       *
       * The original position is (0,0).
       * </pre>
       */
      int getGeometryCount();
      /**
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       *
       * <pre>
       * Contains a stream of commands and parameters (vertices). The
       * repeat count is shifted to the left by 3 bits. This means
       * that the command has 3 bits (0-7). The repeat count
       * indicates how often this command is to be repeated. Defined
       * commands are:
       * - MoveTo:    1   (2 parameters follow)
       * - LineTo:    2   (2 parameters follow)
       * - ClosePath: 7   (no parameters follow)
       *
       * Commands are encoded as uint32 varints. Vertex parameters
       * are encoded as deltas to the previous position and, as they
       * may be negative, are further "zigzag" encoded as unsigned
       * 32-bit ints:
       *
       *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
       *
       * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
       * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
       *                                  == command type 7 (ClosePath), length 1
       *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
       *                         === relative LineTo(+5, +6) == LineTo(8, 12)
       *                      == [00010 010] = command type 2 (LineTo), length 2
       *                  === relative MoveTo(+3, +6)
       *              == [00001 001] = command type 1 (MoveTo), length 1
       *
       * The original position is (0,0).
       * </pre>
       */
      int getGeometry(int index);
    }
    /**
     * Protobuf type {@code mapnik.vector.tile.feature}
     */
    public static final class feature extends
        com.google.protobuf.GeneratedMessageLite
        implements featureOrBuilder {
      // Use feature.newBuilder() to construct.
      private feature(com.google.protobuf.GeneratedMessageLite.Builder builder) {
        super(builder);

      }
      private feature(boolean noInit) {}

      private static final feature defaultInstance;
      public static feature getDefaultInstance() {
        return defaultInstance;
      }

      public feature getDefaultInstanceForType() {
        return defaultInstance;
      }

      private feature(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readUInt64();
                break;
              }
              case 16: {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  tags_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                tags_.add(input.readUInt32());
                break;
              }
              case 18: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                  tags_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                while (input.getBytesUntilLimit() > 0) {
                  tags_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                mapnik.vector.VectorTile.tile.GeomType value = mapnik.vector.VectorTile.tile.GeomType.valueOf(rawValue);
                if (value != null) {
                  bitField0_ |= 0x00000002;
                  type_ = value;
                }
                break;
              }
              case 32: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  geometry_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                geometry_.add(input.readUInt32());
                break;
              }
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                  geometry_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000008;
                }
                while (input.getBytesUntilLimit() > 0) {
                  geometry_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            tags_ = java.util.Collections.unmodifiableList(tags_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            geometry_ = java.util.Collections.unmodifiableList(geometry_);
          }
          makeExtensionsImmutable();
        }
      }
      public static com.google.protobuf.Parser<feature> PARSER =
          new com.google.protobuf.AbstractParser<feature>() {
        public feature parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new feature(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<feature> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional uint64 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private long id_;
      /**
       * <code>optional uint64 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 id = 1;</code>
       */
      public long getId() {
        return id_;
      }

      // repeated uint32 tags = 2 [packed = true];
      public static final int TAGS_FIELD_NUMBER = 2;
      private java.util.List<java.lang.Integer> tags_;
      /**
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       *
       * <pre>
       * Tags of this feature. Even numbered values refer to the nth
       * value in the keys list on the tile message, odd numbered
       * values refer to the nth value in the values list on the tile
       * message.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTagsList() {
        return tags_;
      }
      /**
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       *
       * <pre>
       * Tags of this feature. Even numbered values refer to the nth
       * value in the keys list on the tile message, odd numbered
       * values refer to the nth value in the values list on the tile
       * message.
       * </pre>
       */
      public int getTagsCount() {
        return tags_.size();
      }
      /**
       * <code>repeated uint32 tags = 2 [packed = true];</code>
       *
       * <pre>
       * Tags of this feature. Even numbered values refer to the nth
       * value in the keys list on the tile message, odd numbered
       * values refer to the nth value in the values list on the tile
       * message.
       * </pre>
       */
      public int getTags(int index) {
        return tags_.get(index);
      }
      private int tagsMemoizedSerializedSize = -1;

      // optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
      public static final int TYPE_FIELD_NUMBER = 3;
      private mapnik.vector.VectorTile.tile.GeomType type_;
      /**
       * <code>optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];</code>
       *
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];</code>
       *
       * <pre>
       * The type of geometry stored in this feature.
       * </pre>
       */
      public mapnik.vector.VectorTile.tile.GeomType getType() {
        return type_;
      }

      // repeated uint32 geometry = 4 [packed = true];
      public static final int GEOMETRY_FIELD_NUMBER = 4;
      private java.util.List<java.lang.Integer> geometry_;
      /**
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       *
       * <pre>
       * Contains a stream of commands and parameters (vertices). The
       * repeat count is shifted to the left by 3 bits. This means
       * that the command has 3 bits (0-7). The repeat count
       * indicates how often this command is to be repeated. Defined
       * commands are:
       * - MoveTo:    1   (2 parameters follow)
       * - LineTo:    2   (2 parameters follow)
       * - ClosePath: 7   (no parameters follow)
       *
       * Commands are encoded as uint32 varints. Vertex parameters
       * are encoded as deltas to the previous position and, as they
       * may be negative, are further "zigzag" encoded as unsigned
       * 32-bit ints:
       *
       *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
       *
       * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
       * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
       *                                  == command type 7 (ClosePath), length 1
       *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
       *                         === relative LineTo(+5, +6) == LineTo(8, 12)
       *                      == [00010 010] = command type 2 (LineTo), length 2
       *                  === relative MoveTo(+3, +6)
       *              == [00001 001] = command type 1 (MoveTo), length 1
       *
       * The original position is (0,0).
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getGeometryList() {
        return geometry_;
      }
      /**
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       *
       * <pre>
       * Contains a stream of commands and parameters (vertices). The
       * repeat count is shifted to the left by 3 bits. This means
       * that the command has 3 bits (0-7). The repeat count
       * indicates how often this command is to be repeated. Defined
       * commands are:
       * - MoveTo:    1   (2 parameters follow)
       * - LineTo:    2   (2 parameters follow)
       * - ClosePath: 7   (no parameters follow)
       *
       * Commands are encoded as uint32 varints. Vertex parameters
       * are encoded as deltas to the previous position and, as they
       * may be negative, are further "zigzag" encoded as unsigned
       * 32-bit ints:
       *
       *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
       *
       * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
       * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
       *                                  == command type 7 (ClosePath), length 1
       *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
       *                         === relative LineTo(+5, +6) == LineTo(8, 12)
       *                      == [00010 010] = command type 2 (LineTo), length 2
       *                  === relative MoveTo(+3, +6)
       *              == [00001 001] = command type 1 (MoveTo), length 1
       *
       * The original position is (0,0).
       * </pre>
       */
      public int getGeometryCount() {
        return geometry_.size();
      }
      /**
       * <code>repeated uint32 geometry = 4 [packed = true];</code>
       *
       * <pre>
       * Contains a stream of commands and parameters (vertices). The
       * repeat count is shifted to the left by 3 bits. This means
       * that the command has 3 bits (0-7). The repeat count
       * indicates how often this command is to be repeated. Defined
       * commands are:
       * - MoveTo:    1   (2 parameters follow)
       * - LineTo:    2   (2 parameters follow)
       * - ClosePath: 7   (no parameters follow)
       *
       * Commands are encoded as uint32 varints. Vertex parameters
       * are encoded as deltas to the previous position and, as they
       * may be negative, are further "zigzag" encoded as unsigned
       * 32-bit ints:
       *
       *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
       *
       * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
       * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
       *                                  == command type 7 (ClosePath), length 1
       *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
       *                         === relative LineTo(+5, +6) == LineTo(8, 12)
       *                      == [00010 010] = command type 2 (LineTo), length 2
       *                  === relative MoveTo(+3, +6)
       *              == [00001 001] = command type 1 (MoveTo), length 1
       *
       * The original position is (0,0).
       * </pre>
       */
      public int getGeometry(int index) {
        return geometry_.get(index);
      }
      private int geometryMemoizedSerializedSize = -1;

      private void initFields() {
        id_ = 0L;
        tags_ = java.util.Collections.emptyList();
        type_ = mapnik.vector.VectorTile.tile.GeomType.Unknown;
        geometry_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt64(1, id_);
        }
        if (getTagsList().size() > 0) {
          output.writeRawVarint32(18);
          output.writeRawVarint32(tagsMemoizedSerializedSize);
        }
        for (int i = 0; i < tags_.size(); i++) {
          output.writeUInt32NoTag(tags_.get(i));
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeEnum(3, type_.getNumber());
        }
        if (getGeometryList().size() > 0) {
          output.writeRawVarint32(34);
          output.writeRawVarint32(geometryMemoizedSerializedSize);
        }
        for (int i = 0; i < geometry_.size(); i++) {
          output.writeUInt32NoTag(geometry_.get(i));
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(1, id_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < tags_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(tags_.get(i));
          }
          size += dataSize;
          if (!getTagsList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          tagsMemoizedSerializedSize = dataSize;
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, type_.getNumber());
        }
        {
          int dataSize = 0;
          for (int i = 0; i < geometry_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(geometry_.get(i));
          }
          size += dataSize;
          if (!getGeometryList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          geometryMemoizedSerializedSize = dataSize;
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static mapnik.vector.VectorTile.tile.feature parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static mapnik.vector.VectorTile.tile.feature parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.feature parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static mapnik.vector.VectorTile.tile.feature parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.feature parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static mapnik.vector.VectorTile.tile.feature parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.feature parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static mapnik.vector.VectorTile.tile.feature parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.feature parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static mapnik.vector.VectorTile.tile.feature parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(mapnik.vector.VectorTile.tile.feature prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code mapnik.vector.tile.feature}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            mapnik.vector.VectorTile.tile.feature, Builder>
          implements mapnik.vector.VectorTile.tile.featureOrBuilder {
        // Construct using mapnik.vector.VectorTile.tile.feature.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          id_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000001);
          tags_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          type_ = mapnik.vector.VectorTile.tile.GeomType.Unknown;
          bitField0_ = (bitField0_ & ~0x00000004);
          geometry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public mapnik.vector.VectorTile.tile.feature getDefaultInstanceForType() {
          return mapnik.vector.VectorTile.tile.feature.getDefaultInstance();
        }

        public mapnik.vector.VectorTile.tile.feature build() {
          mapnik.vector.VectorTile.tile.feature result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public mapnik.vector.VectorTile.tile.feature buildPartial() {
          mapnik.vector.VectorTile.tile.feature result = new mapnik.vector.VectorTile.tile.feature(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            tags_ = java.util.Collections.unmodifiableList(tags_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.tags_ = tags_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000002;
          }
          result.type_ = type_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            geometry_ = java.util.Collections.unmodifiableList(geometry_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.geometry_ = geometry_;
          result.bitField0_ = to_bitField0_;
          return result;
        }

        public Builder mergeFrom(mapnik.vector.VectorTile.tile.feature other) {
          if (other == mapnik.vector.VectorTile.tile.feature.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (!other.tags_.isEmpty()) {
            if (tags_.isEmpty()) {
              tags_ = other.tags_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTagsIsMutable();
              tags_.addAll(other.tags_);
            }
            
          }
          if (other.hasType()) {
            setType(other.getType());
          }
          if (!other.geometry_.isEmpty()) {
            if (geometry_.isEmpty()) {
              geometry_ = other.geometry_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureGeometryIsMutable();
              geometry_.addAll(other.geometry_);
            }
            
          }
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          mapnik.vector.VectorTile.tile.feature parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (mapnik.vector.VectorTile.tile.feature) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint64 id = 1;
        private long id_ ;
        /**
         * <code>optional uint64 id = 1;</code>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint64 id = 1;</code>
         */
        public long getId() {
          return id_;
        }
        /**
         * <code>optional uint64 id = 1;</code>
         */
        public Builder setId(long value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          
          return this;
        }
        /**
         * <code>optional uint64 id = 1;</code>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0L;
          
          return this;
        }

        // repeated uint32 tags = 2 [packed = true];
        private java.util.List<java.lang.Integer> tags_ = java.util.Collections.emptyList();
        private void ensureTagsIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            tags_ = new java.util.ArrayList<java.lang.Integer>(tags_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         *
         * <pre>
         * Tags of this feature. Even numbered values refer to the nth
         * value in the keys list on the tile message, odd numbered
         * values refer to the nth value in the values list on the tile
         * message.
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getTagsList() {
          return java.util.Collections.unmodifiableList(tags_);
        }
        /**
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         *
         * <pre>
         * Tags of this feature. Even numbered values refer to the nth
         * value in the keys list on the tile message, odd numbered
         * values refer to the nth value in the values list on the tile
         * message.
         * </pre>
         */
        public int getTagsCount() {
          return tags_.size();
        }
        /**
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         *
         * <pre>
         * Tags of this feature. Even numbered values refer to the nth
         * value in the keys list on the tile message, odd numbered
         * values refer to the nth value in the values list on the tile
         * message.
         * </pre>
         */
        public int getTags(int index) {
          return tags_.get(index);
        }
        /**
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         *
         * <pre>
         * Tags of this feature. Even numbered values refer to the nth
         * value in the keys list on the tile message, odd numbered
         * values refer to the nth value in the values list on the tile
         * message.
         * </pre>
         */
        public Builder setTags(
            int index, int value) {
          ensureTagsIsMutable();
          tags_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         *
         * <pre>
         * Tags of this feature. Even numbered values refer to the nth
         * value in the keys list on the tile message, odd numbered
         * values refer to the nth value in the values list on the tile
         * message.
         * </pre>
         */
        public Builder addTags(int value) {
          ensureTagsIsMutable();
          tags_.add(value);
          
          return this;
        }
        /**
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         *
         * <pre>
         * Tags of this feature. Even numbered values refer to the nth
         * value in the keys list on the tile message, odd numbered
         * values refer to the nth value in the values list on the tile
         * message.
         * </pre>
         */
        public Builder addAllTags(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureTagsIsMutable();
          super.addAll(values, tags_);
          
          return this;
        }
        /**
         * <code>repeated uint32 tags = 2 [packed = true];</code>
         *
         * <pre>
         * Tags of this feature. Even numbered values refer to the nth
         * value in the keys list on the tile message, odd numbered
         * values refer to the nth value in the values list on the tile
         * message.
         * </pre>
         */
        public Builder clearTags() {
          tags_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          
          return this;
        }

        // optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];
        private mapnik.vector.VectorTile.tile.GeomType type_ = mapnik.vector.VectorTile.tile.GeomType.Unknown;
        /**
         * <code>optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];</code>
         *
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];</code>
         *
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         */
        public mapnik.vector.VectorTile.tile.GeomType getType() {
          return type_;
        }
        /**
         * <code>optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];</code>
         *
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         */
        public Builder setType(mapnik.vector.VectorTile.tile.GeomType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000004;
          type_ = value;
          
          return this;
        }
        /**
         * <code>optional .mapnik.vector.tile.GeomType type = 3 [default = Unknown];</code>
         *
         * <pre>
         * The type of geometry stored in this feature.
         * </pre>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000004);
          type_ = mapnik.vector.VectorTile.tile.GeomType.Unknown;
          
          return this;
        }

        // repeated uint32 geometry = 4 [packed = true];
        private java.util.List<java.lang.Integer> geometry_ = java.util.Collections.emptyList();
        private void ensureGeometryIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            geometry_ = new java.util.ArrayList<java.lang.Integer>(geometry_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         *
         * <pre>
         * Contains a stream of commands and parameters (vertices). The
         * repeat count is shifted to the left by 3 bits. This means
         * that the command has 3 bits (0-7). The repeat count
         * indicates how often this command is to be repeated. Defined
         * commands are:
         * - MoveTo:    1   (2 parameters follow)
         * - LineTo:    2   (2 parameters follow)
         * - ClosePath: 7   (no parameters follow)
         *
         * Commands are encoded as uint32 varints. Vertex parameters
         * are encoded as deltas to the previous position and, as they
         * may be negative, are further "zigzag" encoded as unsigned
         * 32-bit ints:
         *
         *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
         *
         * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
         * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
         *                                  == command type 7 (ClosePath), length 1
         *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
         *                         === relative LineTo(+5, +6) == LineTo(8, 12)
         *                      == [00010 010] = command type 2 (LineTo), length 2
         *                  === relative MoveTo(+3, +6)
         *              == [00001 001] = command type 1 (MoveTo), length 1
         *
         * The original position is (0,0).
         * </pre>
         */
        public java.util.List<java.lang.Integer>
            getGeometryList() {
          return java.util.Collections.unmodifiableList(geometry_);
        }
        /**
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         *
         * <pre>
         * Contains a stream of commands and parameters (vertices). The
         * repeat count is shifted to the left by 3 bits. This means
         * that the command has 3 bits (0-7). The repeat count
         * indicates how often this command is to be repeated. Defined
         * commands are:
         * - MoveTo:    1   (2 parameters follow)
         * - LineTo:    2   (2 parameters follow)
         * - ClosePath: 7   (no parameters follow)
         *
         * Commands are encoded as uint32 varints. Vertex parameters
         * are encoded as deltas to the previous position and, as they
         * may be negative, are further "zigzag" encoded as unsigned
         * 32-bit ints:
         *
         *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
         *
         * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
         * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
         *                                  == command type 7 (ClosePath), length 1
         *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
         *                         === relative LineTo(+5, +6) == LineTo(8, 12)
         *                      == [00010 010] = command type 2 (LineTo), length 2
         *                  === relative MoveTo(+3, +6)
         *              == [00001 001] = command type 1 (MoveTo), length 1
         *
         * The original position is (0,0).
         * </pre>
         */
        public int getGeometryCount() {
          return geometry_.size();
        }
        /**
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         *
         * <pre>
         * Contains a stream of commands and parameters (vertices). The
         * repeat count is shifted to the left by 3 bits. This means
         * that the command has 3 bits (0-7). The repeat count
         * indicates how often this command is to be repeated. Defined
         * commands are:
         * - MoveTo:    1   (2 parameters follow)
         * - LineTo:    2   (2 parameters follow)
         * - ClosePath: 7   (no parameters follow)
         *
         * Commands are encoded as uint32 varints. Vertex parameters
         * are encoded as deltas to the previous position and, as they
         * may be negative, are further "zigzag" encoded as unsigned
         * 32-bit ints:
         *
         *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
         *
         * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
         * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
         *                                  == command type 7 (ClosePath), length 1
         *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
         *                         === relative LineTo(+5, +6) == LineTo(8, 12)
         *                      == [00010 010] = command type 2 (LineTo), length 2
         *                  === relative MoveTo(+3, +6)
         *              == [00001 001] = command type 1 (MoveTo), length 1
         *
         * The original position is (0,0).
         * </pre>
         */
        public int getGeometry(int index) {
          return geometry_.get(index);
        }
        /**
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         *
         * <pre>
         * Contains a stream of commands and parameters (vertices). The
         * repeat count is shifted to the left by 3 bits. This means
         * that the command has 3 bits (0-7). The repeat count
         * indicates how often this command is to be repeated. Defined
         * commands are:
         * - MoveTo:    1   (2 parameters follow)
         * - LineTo:    2   (2 parameters follow)
         * - ClosePath: 7   (no parameters follow)
         *
         * Commands are encoded as uint32 varints. Vertex parameters
         * are encoded as deltas to the previous position and, as they
         * may be negative, are further "zigzag" encoded as unsigned
         * 32-bit ints:
         *
         *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
         *
         * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
         * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
         *                                  == command type 7 (ClosePath), length 1
         *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
         *                         === relative LineTo(+5, +6) == LineTo(8, 12)
         *                      == [00010 010] = command type 2 (LineTo), length 2
         *                  === relative MoveTo(+3, +6)
         *              == [00001 001] = command type 1 (MoveTo), length 1
         *
         * The original position is (0,0).
         * </pre>
         */
        public Builder setGeometry(
            int index, int value) {
          ensureGeometryIsMutable();
          geometry_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         *
         * <pre>
         * Contains a stream of commands and parameters (vertices). The
         * repeat count is shifted to the left by 3 bits. This means
         * that the command has 3 bits (0-7). The repeat count
         * indicates how often this command is to be repeated. Defined
         * commands are:
         * - MoveTo:    1   (2 parameters follow)
         * - LineTo:    2   (2 parameters follow)
         * - ClosePath: 7   (no parameters follow)
         *
         * Commands are encoded as uint32 varints. Vertex parameters
         * are encoded as deltas to the previous position and, as they
         * may be negative, are further "zigzag" encoded as unsigned
         * 32-bit ints:
         *
         *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
         *
         * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
         * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
         *                                  == command type 7 (ClosePath), length 1
         *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
         *                         === relative LineTo(+5, +6) == LineTo(8, 12)
         *                      == [00010 010] = command type 2 (LineTo), length 2
         *                  === relative MoveTo(+3, +6)
         *              == [00001 001] = command type 1 (MoveTo), length 1
         *
         * The original position is (0,0).
         * </pre>
         */
        public Builder addGeometry(int value) {
          ensureGeometryIsMutable();
          geometry_.add(value);
          
          return this;
        }
        /**
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         *
         * <pre>
         * Contains a stream of commands and parameters (vertices). The
         * repeat count is shifted to the left by 3 bits. This means
         * that the command has 3 bits (0-7). The repeat count
         * indicates how often this command is to be repeated. Defined
         * commands are:
         * - MoveTo:    1   (2 parameters follow)
         * - LineTo:    2   (2 parameters follow)
         * - ClosePath: 7   (no parameters follow)
         *
         * Commands are encoded as uint32 varints. Vertex parameters
         * are encoded as deltas to the previous position and, as they
         * may be negative, are further "zigzag" encoded as unsigned
         * 32-bit ints:
         *
         *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
         *
         * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
         * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
         *                                  == command type 7 (ClosePath), length 1
         *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
         *                         === relative LineTo(+5, +6) == LineTo(8, 12)
         *                      == [00010 010] = command type 2 (LineTo), length 2
         *                  === relative MoveTo(+3, +6)
         *              == [00001 001] = command type 1 (MoveTo), length 1
         *
         * The original position is (0,0).
         * </pre>
         */
        public Builder addAllGeometry(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureGeometryIsMutable();
          super.addAll(values, geometry_);
          
          return this;
        }
        /**
         * <code>repeated uint32 geometry = 4 [packed = true];</code>
         *
         * <pre>
         * Contains a stream of commands and parameters (vertices). The
         * repeat count is shifted to the left by 3 bits. This means
         * that the command has 3 bits (0-7). The repeat count
         * indicates how often this command is to be repeated. Defined
         * commands are:
         * - MoveTo:    1   (2 parameters follow)
         * - LineTo:    2   (2 parameters follow)
         * - ClosePath: 7   (no parameters follow)
         *
         * Commands are encoded as uint32 varints. Vertex parameters
         * are encoded as deltas to the previous position and, as they
         * may be negative, are further "zigzag" encoded as unsigned
         * 32-bit ints:
         *
         *   n = (n &lt;&lt; 1) ^ (n &gt;&gt; 31)
         *
         * Ex.: MoveTo(3, 6), LineTo(8, 12), LineTo(20, 34), ClosePath
         * Encoded as: [ 9 6 12 18 10 12 24 44 15 ]
         *                                  == command type 7 (ClosePath), length 1
         *                             ===== relative LineTo(+12, +22) == LineTo(20, 34)
         *                         === relative LineTo(+5, +6) == LineTo(8, 12)
         *                      == [00010 010] = command type 2 (LineTo), length 2
         *                  === relative MoveTo(+3, +6)
         *              == [00001 001] = command type 1 (MoveTo), length 1
         *
         * The original position is (0,0).
         * </pre>
         */
        public Builder clearGeometry() {
          geometry_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          
          return this;
        }

        // @@protoc_insertion_point(builder_scope:mapnik.vector.tile.feature)
      }

      static {
        defaultInstance = new feature(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mapnik.vector.tile.feature)
    }

    public interface layerOrBuilder extends 
         com.google.protobuf.GeneratedMessageLite.
              ExtendableMessageOrBuilder<layer> {

      // required uint32 version = 15 [default = 1];
      /**
       * <code>required uint32 version = 15 [default = 1];</code>
       *
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       */
      boolean hasVersion();
      /**
       * <code>required uint32 version = 15 [default = 1];</code>
       *
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       */
      int getVersion();

      // required string name = 1;
      /**
       * <code>required string name = 1;</code>
       */
      boolean hasName();
      /**
       * <code>required string name = 1;</code>
       */
      java.lang.String getName();
      /**
       * <code>required string name = 1;</code>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      // repeated .mapnik.vector.tile.feature features = 2;
      /**
       * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
       *
       * <pre>
       * The actual features in this tile.
       * </pre>
       */
      java.util.List<mapnik.vector.VectorTile.tile.feature> 
          getFeaturesList();
      /**
       * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
       *
       * <pre>
       * The actual features in this tile.
       * </pre>
       */
      mapnik.vector.VectorTile.tile.feature getFeatures(int index);
      /**
       * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
       *
       * <pre>
       * The actual features in this tile.
       * </pre>
       */
      int getFeaturesCount();

      // repeated string keys = 3;
      /**
       * <code>repeated string keys = 3;</code>
       *
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       */
      java.util.List<java.lang.String>
      getKeysList();
      /**
       * <code>repeated string keys = 3;</code>
       *
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       */
      int getKeysCount();
      /**
       * <code>repeated string keys = 3;</code>
       *
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       */
      java.lang.String getKeys(int index);
      /**
       * <code>repeated string keys = 3;</code>
       *
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       */
      com.google.protobuf.ByteString
          getKeysBytes(int index);

      // repeated .mapnik.vector.tile.value values = 4;
      /**
       * <code>repeated .mapnik.vector.tile.value values = 4;</code>
       *
       * <pre>
       * Dictionary encoding for values
       * </pre>
       */
      java.util.List<mapnik.vector.VectorTile.tile.value> 
          getValuesList();
      /**
       * <code>repeated .mapnik.vector.tile.value values = 4;</code>
       *
       * <pre>
       * Dictionary encoding for values
       * </pre>
       */
      mapnik.vector.VectorTile.tile.value getValues(int index);
      /**
       * <code>repeated .mapnik.vector.tile.value values = 4;</code>
       *
       * <pre>
       * Dictionary encoding for values
       * </pre>
       */
      int getValuesCount();

      // optional uint32 extent = 5 [default = 4096];
      /**
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       *
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * </pre>
       */
      boolean hasExtent();
      /**
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       *
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * </pre>
       */
      int getExtent();
    }
    /**
     * Protobuf type {@code mapnik.vector.tile.layer}
     */
    public static final class layer extends
        com.google.protobuf.GeneratedMessageLite.ExtendableMessage<
          layer> implements layerOrBuilder {
      // Use layer.newBuilder() to construct.
      private layer(com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<mapnik.vector.VectorTile.tile.layer, ?> builder) {
        super(builder);

      }
      private layer(boolean noInit) {}

      private static final layer defaultInstance;
      public static layer getDefaultInstance() {
        return defaultInstance;
      }

      public layer getDefaultInstanceForType() {
        return defaultInstance;
      }

      private layer(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000002;
                name_ = input.readBytes();
                break;
              }
              case 18: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  features_ = new java.util.ArrayList<mapnik.vector.VectorTile.tile.feature>();
                  mutable_bitField0_ |= 0x00000004;
                }
                features_.add(input.readMessage(mapnik.vector.VectorTile.tile.feature.PARSER, extensionRegistry));
                break;
              }
              case 26: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  keys_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000008;
                }
                keys_.add(input.readBytes());
                break;
              }
              case 34: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  values_ = new java.util.ArrayList<mapnik.vector.VectorTile.tile.value>();
                  mutable_bitField0_ |= 0x00000010;
                }
                values_.add(input.readMessage(mapnik.vector.VectorTile.tile.value.PARSER, extensionRegistry));
                break;
              }
              case 40: {
                bitField0_ |= 0x00000004;
                extent_ = input.readUInt32();
                break;
              }
              case 120: {
                bitField0_ |= 0x00000001;
                version_ = input.readUInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            features_ = java.util.Collections.unmodifiableList(features_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            keys_ = new com.google.protobuf.UnmodifiableLazyStringList(keys_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            values_ = java.util.Collections.unmodifiableList(values_);
          }
          makeExtensionsImmutable();
        }
      }
      public static com.google.protobuf.Parser<layer> PARSER =
          new com.google.protobuf.AbstractParser<layer>() {
        public layer parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new layer(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<layer> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required uint32 version = 15 [default = 1];
      public static final int VERSION_FIELD_NUMBER = 15;
      private int version_;
      /**
       * <code>required uint32 version = 15 [default = 1];</code>
       *
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 version = 15 [default = 1];</code>
       *
       * <pre>
       * Any compliant implementation must first read the version
       * number encoded in this message and choose the correct
       * implementation for this version number before proceeding to
       * decode other parts of this message.
       * </pre>
       */
      public int getVersion() {
        return version_;
      }

      // required string name = 1;
      public static final int NAME_FIELD_NUMBER = 1;
      private java.lang.Object name_;
      /**
       * <code>required string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // repeated .mapnik.vector.tile.feature features = 2;
      public static final int FEATURES_FIELD_NUMBER = 2;
      private java.util.List<mapnik.vector.VectorTile.tile.feature> features_;
      /**
       * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
       *
       * <pre>
       * The actual features in this tile.
       * </pre>
       */
      public java.util.List<mapnik.vector.VectorTile.tile.feature> getFeaturesList() {
        return features_;
      }
      /**
       * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
       *
       * <pre>
       * The actual features in this tile.
       * </pre>
       */
      public java.util.List<? extends mapnik.vector.VectorTile.tile.featureOrBuilder> 
          getFeaturesOrBuilderList() {
        return features_;
      }
      /**
       * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
       *
       * <pre>
       * The actual features in this tile.
       * </pre>
       */
      public int getFeaturesCount() {
        return features_.size();
      }
      /**
       * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
       *
       * <pre>
       * The actual features in this tile.
       * </pre>
       */
      public mapnik.vector.VectorTile.tile.feature getFeatures(int index) {
        return features_.get(index);
      }
      /**
       * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
       *
       * <pre>
       * The actual features in this tile.
       * </pre>
       */
      public mapnik.vector.VectorTile.tile.featureOrBuilder getFeaturesOrBuilder(
          int index) {
        return features_.get(index);
      }

      // repeated string keys = 3;
      public static final int KEYS_FIELD_NUMBER = 3;
      private com.google.protobuf.LazyStringList keys_;
      /**
       * <code>repeated string keys = 3;</code>
       *
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       */
      public java.util.List<java.lang.String>
          getKeysList() {
        return keys_;
      }
      /**
       * <code>repeated string keys = 3;</code>
       *
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       */
      public int getKeysCount() {
        return keys_.size();
      }
      /**
       * <code>repeated string keys = 3;</code>
       *
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       */
      public java.lang.String getKeys(int index) {
        return keys_.get(index);
      }
      /**
       * <code>repeated string keys = 3;</code>
       *
       * <pre>
       * Dictionary encoding for keys
       * </pre>
       */
      public com.google.protobuf.ByteString
          getKeysBytes(int index) {
        return keys_.getByteString(index);
      }

      // repeated .mapnik.vector.tile.value values = 4;
      public static final int VALUES_FIELD_NUMBER = 4;
      private java.util.List<mapnik.vector.VectorTile.tile.value> values_;
      /**
       * <code>repeated .mapnik.vector.tile.value values = 4;</code>
       *
       * <pre>
       * Dictionary encoding for values
       * </pre>
       */
      public java.util.List<mapnik.vector.VectorTile.tile.value> getValuesList() {
        return values_;
      }
      /**
       * <code>repeated .mapnik.vector.tile.value values = 4;</code>
       *
       * <pre>
       * Dictionary encoding for values
       * </pre>
       */
      public java.util.List<? extends mapnik.vector.VectorTile.tile.valueOrBuilder> 
          getValuesOrBuilderList() {
        return values_;
      }
      /**
       * <code>repeated .mapnik.vector.tile.value values = 4;</code>
       *
       * <pre>
       * Dictionary encoding for values
       * </pre>
       */
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <code>repeated .mapnik.vector.tile.value values = 4;</code>
       *
       * <pre>
       * Dictionary encoding for values
       * </pre>
       */
      public mapnik.vector.VectorTile.tile.value getValues(int index) {
        return values_.get(index);
      }
      /**
       * <code>repeated .mapnik.vector.tile.value values = 4;</code>
       *
       * <pre>
       * Dictionary encoding for values
       * </pre>
       */
      public mapnik.vector.VectorTile.tile.valueOrBuilder getValuesOrBuilder(
          int index) {
        return values_.get(index);
      }

      // optional uint32 extent = 5 [default = 4096];
      public static final int EXTENT_FIELD_NUMBER = 5;
      private int extent_;
      /**
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       *
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * </pre>
       */
      public boolean hasExtent() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 extent = 5 [default = 4096];</code>
       *
       * <pre>
       * The bounding box in this tile spans from 0..4095 units
       * </pre>
       */
      public int getExtent() {
        return extent_;
      }

      private void initFields() {
        version_ = 1;
        name_ = "";
        features_ = java.util.Collections.emptyList();
        keys_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        values_ = java.util.Collections.emptyList();
        extent_ = 4096;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasVersion()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasName()) {
          memoizedIsInitialized = 0;
          return false;
        }
        for (int i = 0; i < getValuesCount(); i++) {
          if (!getValues(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        com.google.protobuf.GeneratedMessageLite
          .ExtendableMessage<mapnik.vector.VectorTile.tile.layer>.ExtensionWriter extensionWriter =
            newExtensionWriter();
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(1, getNameBytes());
        }
        for (int i = 0; i < features_.size(); i++) {
          output.writeMessage(2, features_.get(i));
        }
        for (int i = 0; i < keys_.size(); i++) {
          output.writeBytes(3, keys_.getByteString(i));
        }
        for (int i = 0; i < values_.size(); i++) {
          output.writeMessage(4, values_.get(i));
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeUInt32(5, extent_);
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(15, version_);
        }
        extensionWriter.writeUntil(536870912, output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getNameBytes());
        }
        for (int i = 0; i < features_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, features_.get(i));
        }
        {
          int dataSize = 0;
          for (int i = 0; i < keys_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeBytesSizeNoTag(keys_.getByteString(i));
          }
          size += dataSize;
          size += 1 * getKeysList().size();
        }
        for (int i = 0; i < values_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, values_.get(i));
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(5, extent_);
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(15, version_);
        }
        size += extensionsSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static mapnik.vector.VectorTile.tile.layer parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static mapnik.vector.VectorTile.tile.layer parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.layer parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static mapnik.vector.VectorTile.tile.layer parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.layer parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static mapnik.vector.VectorTile.tile.layer parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.layer parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static mapnik.vector.VectorTile.tile.layer parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static mapnik.vector.VectorTile.tile.layer parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static mapnik.vector.VectorTile.tile.layer parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(mapnik.vector.VectorTile.tile.layer prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code mapnik.vector.tile.layer}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
            mapnik.vector.VectorTile.tile.layer, Builder> implements mapnik.vector.VectorTile.tile.layerOrBuilder {
        // Construct using mapnik.vector.VectorTile.tile.layer.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          version_ = 1;
          bitField0_ = (bitField0_ & ~0x00000001);
          name_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          features_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          keys_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000008);
          values_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          extent_ = 4096;
          bitField0_ = (bitField0_ & ~0x00000020);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public mapnik.vector.VectorTile.tile.layer getDefaultInstanceForType() {
          return mapnik.vector.VectorTile.tile.layer.getDefaultInstance();
        }

        public mapnik.vector.VectorTile.tile.layer build() {
          mapnik.vector.VectorTile.tile.layer result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public mapnik.vector.VectorTile.tile.layer buildPartial() {
          mapnik.vector.VectorTile.tile.layer result = new mapnik.vector.VectorTile.tile.layer(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.version_ = version_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.name_ = name_;
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            features_ = java.util.Collections.unmodifiableList(features_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.features_ = features_;
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            keys_ = new com.google.protobuf.UnmodifiableLazyStringList(
                keys_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.keys_ = keys_;
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            values_ = java.util.Collections.unmodifiableList(values_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.values_ = values_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000004;
          }
          result.extent_ = extent_;
          result.bitField0_ = to_bitField0_;
          return result;
        }

        public Builder mergeFrom(mapnik.vector.VectorTile.tile.layer other) {
          if (other == mapnik.vector.VectorTile.tile.layer.getDefaultInstance()) return this;
          if (other.hasVersion()) {
            setVersion(other.getVersion());
          }
          if (other.hasName()) {
            bitField0_ |= 0x00000002;
            name_ = other.name_;
            
          }
          if (!other.features_.isEmpty()) {
            if (features_.isEmpty()) {
              features_ = other.features_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureFeaturesIsMutable();
              features_.addAll(other.features_);
            }
            
          }
          if (!other.keys_.isEmpty()) {
            if (keys_.isEmpty()) {
              keys_ = other.keys_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureKeysIsMutable();
              keys_.addAll(other.keys_);
            }
            
          }
          if (!other.values_.isEmpty()) {
            if (values_.isEmpty()) {
              values_ = other.values_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureValuesIsMutable();
              values_.addAll(other.values_);
            }
            
          }
          if (other.hasExtent()) {
            setExtent(other.getExtent());
          }
          this.mergeExtensionFields(other);
          return this;
        }

        public final boolean isInitialized() {
          if (!hasVersion()) {
            
            return false;
          }
          if (!hasName()) {
            
            return false;
          }
          for (int i = 0; i < getValuesCount(); i++) {
            if (!getValues(i).isInitialized()) {
              
              return false;
            }
          }
          if (!extensionsAreInitialized()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          mapnik.vector.VectorTile.tile.layer parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (mapnik.vector.VectorTile.tile.layer) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required uint32 version = 15 [default = 1];
        private int version_ = 1;
        /**
         * <code>required uint32 version = 15 [default = 1];</code>
         *
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         */
        public boolean hasVersion() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required uint32 version = 15 [default = 1];</code>
         *
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         */
        public int getVersion() {
          return version_;
        }
        /**
         * <code>required uint32 version = 15 [default = 1];</code>
         *
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         */
        public Builder setVersion(int value) {
          bitField0_ |= 0x00000001;
          version_ = value;
          
          return this;
        }
        /**
         * <code>required uint32 version = 15 [default = 1];</code>
         *
         * <pre>
         * Any compliant implementation must first read the version
         * number encoded in this message and choose the correct
         * implementation for this version number before proceeding to
         * decode other parts of this message.
         * </pre>
         */
        public Builder clearVersion() {
          bitField0_ = (bitField0_ & ~0x00000001);
          version_ = 1;
          
          return this;
        }

        // required string name = 1;
        private java.lang.Object name_ = "";
        /**
         * <code>required string name = 1;</code>
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required string name = 1;</code>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>required string name = 1;</code>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>required string name = 1;</code>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          name_ = value;
          
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         */
        public Builder clearName() {
          bitField0_ = (bitField0_ & ~0x00000002);
          name_ = getDefaultInstance().getName();
          
          return this;
        }
        /**
         * <code>required string name = 1;</code>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          name_ = value;
          
          return this;
        }

        // repeated .mapnik.vector.tile.feature features = 2;
        private java.util.List<mapnik.vector.VectorTile.tile.feature> features_ =
          java.util.Collections.emptyList();
        private void ensureFeaturesIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            features_ = new java.util.ArrayList<mapnik.vector.VectorTile.tile.feature>(features_);
            bitField0_ |= 0x00000004;
           }
        }

        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public java.util.List<mapnik.vector.VectorTile.tile.feature> getFeaturesList() {
          return java.util.Collections.unmodifiableList(features_);
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public int getFeaturesCount() {
          return features_.size();
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public mapnik.vector.VectorTile.tile.feature getFeatures(int index) {
          return features_.get(index);
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public Builder setFeatures(
            int index, mapnik.vector.VectorTile.tile.feature value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeaturesIsMutable();
          features_.set(index, value);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public Builder setFeatures(
            int index, mapnik.vector.VectorTile.tile.feature.Builder builderForValue) {
          ensureFeaturesIsMutable();
          features_.set(index, builderForValue.build());

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public Builder addFeatures(mapnik.vector.VectorTile.tile.feature value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeaturesIsMutable();
          features_.add(value);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public Builder addFeatures(
            int index, mapnik.vector.VectorTile.tile.feature value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFeaturesIsMutable();
          features_.add(index, value);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public Builder addFeatures(
            mapnik.vector.VectorTile.tile.feature.Builder builderForValue) {
          ensureFeaturesIsMutable();
          features_.add(builderForValue.build());

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public Builder addFeatures(
            int index, mapnik.vector.VectorTile.tile.feature.Builder builderForValue) {
          ensureFeaturesIsMutable();
          features_.add(index, builderForValue.build());

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public Builder addAllFeatures(
            java.lang.Iterable<? extends mapnik.vector.VectorTile.tile.feature> values) {
          ensureFeaturesIsMutable();
          super.addAll(values, features_);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public Builder clearFeatures() {
          features_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.feature features = 2;</code>
         *
         * <pre>
         * The actual features in this tile.
         * </pre>
         */
        public Builder removeFeatures(int index) {
          ensureFeaturesIsMutable();
          features_.remove(index);

          return this;
        }

        // repeated string keys = 3;
        private com.google.protobuf.LazyStringList keys_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureKeysIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            keys_ = new com.google.protobuf.LazyStringArrayList(keys_);
            bitField0_ |= 0x00000008;
           }
        }
        /**
         * <code>repeated string keys = 3;</code>
         *
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         */
        public java.util.List<java.lang.String>
            getKeysList() {
          return java.util.Collections.unmodifiableList(keys_);
        }
        /**
         * <code>repeated string keys = 3;</code>
         *
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         */
        public int getKeysCount() {
          return keys_.size();
        }
        /**
         * <code>repeated string keys = 3;</code>
         *
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         */
        public java.lang.String getKeys(int index) {
          return keys_.get(index);
        }
        /**
         * <code>repeated string keys = 3;</code>
         *
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         */
        public com.google.protobuf.ByteString
            getKeysBytes(int index) {
          return keys_.getByteString(index);
        }
        /**
         * <code>repeated string keys = 3;</code>
         *
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         */
        public Builder setKeys(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureKeysIsMutable();
          keys_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated string keys = 3;</code>
         *
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         */
        public Builder addKeys(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureKeysIsMutable();
          keys_.add(value);
          
          return this;
        }
        /**
         * <code>repeated string keys = 3;</code>
         *
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         */
        public Builder addAllKeys(
            java.lang.Iterable<java.lang.String> values) {
          ensureKeysIsMutable();
          super.addAll(values, keys_);
          
          return this;
        }
        /**
         * <code>repeated string keys = 3;</code>
         *
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         */
        public Builder clearKeys() {
          keys_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000008);
          
          return this;
        }
        /**
         * <code>repeated string keys = 3;</code>
         *
         * <pre>
         * Dictionary encoding for keys
         * </pre>
         */
        public Builder addKeysBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureKeysIsMutable();
          keys_.add(value);
          
          return this;
        }

        // repeated .mapnik.vector.tile.value values = 4;
        private java.util.List<mapnik.vector.VectorTile.tile.value> values_ =
          java.util.Collections.emptyList();
        private void ensureValuesIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            values_ = new java.util.ArrayList<mapnik.vector.VectorTile.tile.value>(values_);
            bitField0_ |= 0x00000010;
           }
        }

        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public java.util.List<mapnik.vector.VectorTile.tile.value> getValuesList() {
          return java.util.Collections.unmodifiableList(values_);
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public int getValuesCount() {
          return values_.size();
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public mapnik.vector.VectorTile.tile.value getValues(int index) {
          return values_.get(index);
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public Builder setValues(
            int index, mapnik.vector.VectorTile.tile.value value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValuesIsMutable();
          values_.set(index, value);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public Builder setValues(
            int index, mapnik.vector.VectorTile.tile.value.Builder builderForValue) {
          ensureValuesIsMutable();
          values_.set(index, builderForValue.build());

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public Builder addValues(mapnik.vector.VectorTile.tile.value value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValuesIsMutable();
          values_.add(value);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public Builder addValues(
            int index, mapnik.vector.VectorTile.tile.value value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValuesIsMutable();
          values_.add(index, value);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public Builder addValues(
            mapnik.vector.VectorTile.tile.value.Builder builderForValue) {
          ensureValuesIsMutable();
          values_.add(builderForValue.build());

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public Builder addValues(
            int index, mapnik.vector.VectorTile.tile.value.Builder builderForValue) {
          ensureValuesIsMutable();
          values_.add(index, builderForValue.build());

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public Builder addAllValues(
            java.lang.Iterable<? extends mapnik.vector.VectorTile.tile.value> values) {
          ensureValuesIsMutable();
          super.addAll(values, values_);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public Builder clearValues() {
          values_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);

          return this;
        }
        /**
         * <code>repeated .mapnik.vector.tile.value values = 4;</code>
         *
         * <pre>
         * Dictionary encoding for values
         * </pre>
         */
        public Builder removeValues(int index) {
          ensureValuesIsMutable();
          values_.remove(index);

          return this;
        }

        // optional uint32 extent = 5 [default = 4096];
        private int extent_ = 4096;
        /**
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         *
         * <pre>
         * The bounding box in this tile spans from 0..4095 units
         * </pre>
         */
        public boolean hasExtent() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         *
         * <pre>
         * The bounding box in this tile spans from 0..4095 units
         * </pre>
         */
        public int getExtent() {
          return extent_;
        }
        /**
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         *
         * <pre>
         * The bounding box in this tile spans from 0..4095 units
         * </pre>
         */
        public Builder setExtent(int value) {
          bitField0_ |= 0x00000020;
          extent_ = value;
          
          return this;
        }
        /**
         * <code>optional uint32 extent = 5 [default = 4096];</code>
         *
         * <pre>
         * The bounding box in this tile spans from 0..4095 units
         * </pre>
         */
        public Builder clearExtent() {
          bitField0_ = (bitField0_ & ~0x00000020);
          extent_ = 4096;
          
          return this;
        }

        // @@protoc_insertion_point(builder_scope:mapnik.vector.tile.layer)
      }

      static {
        defaultInstance = new layer(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:mapnik.vector.tile.layer)
    }

    // repeated .mapnik.vector.tile.layer layers = 3;
    public static final int LAYERS_FIELD_NUMBER = 3;
    private java.util.List<mapnik.vector.VectorTile.tile.layer> layers_;
    /**
     * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
     */
    public java.util.List<mapnik.vector.VectorTile.tile.layer> getLayersList() {
      return layers_;
    }
    /**
     * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
     */
    public java.util.List<? extends mapnik.vector.VectorTile.tile.layerOrBuilder> 
        getLayersOrBuilderList() {
      return layers_;
    }
    /**
     * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
     */
    public int getLayersCount() {
      return layers_.size();
    }
    /**
     * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
     */
    public mapnik.vector.VectorTile.tile.layer getLayers(int index) {
      return layers_.get(index);
    }
    /**
     * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
     */
    public mapnik.vector.VectorTile.tile.layerOrBuilder getLayersOrBuilder(
        int index) {
      return layers_.get(index);
    }

    private void initFields() {
      layers_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getLayersCount(); i++) {
        if (!getLayers(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessageLite
        .ExtendableMessage<mapnik.vector.VectorTile.tile>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      for (int i = 0; i < layers_.size(); i++) {
        output.writeMessage(3, layers_.get(i));
      }
      extensionWriter.writeUntil(8192, output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < layers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, layers_.get(i));
      }
      size += extensionsSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static mapnik.vector.VectorTile.tile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mapnik.vector.VectorTile.tile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mapnik.vector.VectorTile.tile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mapnik.vector.VectorTile.tile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mapnik.vector.VectorTile.tile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static mapnik.vector.VectorTile.tile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static mapnik.vector.VectorTile.tile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static mapnik.vector.VectorTile.tile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static mapnik.vector.VectorTile.tile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static mapnik.vector.VectorTile.tile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(mapnik.vector.VectorTile.tile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code mapnik.vector.tile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.ExtendableBuilder<
          mapnik.vector.VectorTile.tile, Builder> implements mapnik.vector.VectorTile.tileOrBuilder {
      // Construct using mapnik.vector.VectorTile.tile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        layers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public mapnik.vector.VectorTile.tile getDefaultInstanceForType() {
        return mapnik.vector.VectorTile.tile.getDefaultInstance();
      }

      public mapnik.vector.VectorTile.tile build() {
        mapnik.vector.VectorTile.tile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mapnik.vector.VectorTile.tile buildPartial() {
        mapnik.vector.VectorTile.tile result = new mapnik.vector.VectorTile.tile(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          layers_ = java.util.Collections.unmodifiableList(layers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.layers_ = layers_;
        return result;
      }

      public Builder mergeFrom(mapnik.vector.VectorTile.tile other) {
        if (other == mapnik.vector.VectorTile.tile.getDefaultInstance()) return this;
        if (!other.layers_.isEmpty()) {
          if (layers_.isEmpty()) {
            layers_ = other.layers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureLayersIsMutable();
            layers_.addAll(other.layers_);
          }
          
        }
        this.mergeExtensionFields(other);
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getLayersCount(); i++) {
          if (!getLayers(i).isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mapnik.vector.VectorTile.tile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mapnik.vector.VectorTile.tile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .mapnik.vector.tile.layer layers = 3;
      private java.util.List<mapnik.vector.VectorTile.tile.layer> layers_ =
        java.util.Collections.emptyList();
      private void ensureLayersIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          layers_ = new java.util.ArrayList<mapnik.vector.VectorTile.tile.layer>(layers_);
          bitField0_ |= 0x00000001;
         }
      }

      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public java.util.List<mapnik.vector.VectorTile.tile.layer> getLayersList() {
        return java.util.Collections.unmodifiableList(layers_);
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public int getLayersCount() {
        return layers_.size();
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public mapnik.vector.VectorTile.tile.layer getLayers(int index) {
        return layers_.get(index);
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public Builder setLayers(
          int index, mapnik.vector.VectorTile.tile.layer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayersIsMutable();
        layers_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public Builder setLayers(
          int index, mapnik.vector.VectorTile.tile.layer.Builder builderForValue) {
        ensureLayersIsMutable();
        layers_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public Builder addLayers(mapnik.vector.VectorTile.tile.layer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayersIsMutable();
        layers_.add(value);

        return this;
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public Builder addLayers(
          int index, mapnik.vector.VectorTile.tile.layer value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLayersIsMutable();
        layers_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public Builder addLayers(
          mapnik.vector.VectorTile.tile.layer.Builder builderForValue) {
        ensureLayersIsMutable();
        layers_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public Builder addLayers(
          int index, mapnik.vector.VectorTile.tile.layer.Builder builderForValue) {
        ensureLayersIsMutable();
        layers_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public Builder addAllLayers(
          java.lang.Iterable<? extends mapnik.vector.VectorTile.tile.layer> values) {
        ensureLayersIsMutable();
        super.addAll(values, layers_);

        return this;
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public Builder clearLayers() {
        layers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);

        return this;
      }
      /**
       * <code>repeated .mapnik.vector.tile.layer layers = 3;</code>
       */
      public Builder removeLayers(int index) {
        ensureLayersIsMutable();
        layers_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:mapnik.vector.tile)
    }

    static {
      defaultInstance = new tile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:mapnik.vector.tile)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
